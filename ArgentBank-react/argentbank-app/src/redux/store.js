import { configureStore } from "@reduxjs/toolkit"
import userReducer from "./userSlice"

// üß† √âtape 1 : On r√©cup√®re les donn√©es du localStorage
const persistedToken = localStorage.getItem("token")
const persistedUser = localStorage.getItem("user")

// ‚öôÔ∏è √âtape 2 : On configure le store avec cet √©tat pr√©charg√©
export const store = configureStore({
  reducer: {
    user: userReducer
  },
  preloadedState: {
    user: {
      token: persistedToken || null,
      user: persistedUser ? JSON.parse(persistedUser) : null,
      isAuthenticated: !!persistedToken,
      error: null
    }
  }
})

export default store

// Configurestore va permettre de cr√©er le store, le userReducer va permettre de g√©rer comment l'√©tat utilisateur change, on va ensuite
// r√©cup√©rer les infos stock√© dans le localstorage (dispo dans le navigateur donc) comme le token et l'utilisateur actuel pour que l'utilisateur
// puisse rester connect√© m√™me apr√®s un refresh, on d√©clare ensuite que l'√©tat user sera g√©r√© par le userReducer et preloadstate permet de
// donner un √©tat initial, contenant le token ou rien si rien n'est stock√© dans le localstorage, on utilise null pour √™tre s√ªr qu'il n'y ait
// rien et pas undefined, contenant le user, qui sera converti √† partir d'une chaine de caract√®re json en un objet js avec json.parse si
// si une valeure est trouv√©e, v√©rifie si l'utilisateur est connect√© en v√©rifiant la valeur de persistedToken avec le !! qui permet de renvoyer
// true ou false si quelque chose est trouv√© ou non, on √©tabli une erreur √† null pour les potentielles erreurs par la suite car l'erreur
// est actuellement vide