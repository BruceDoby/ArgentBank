import { createSlice } from '@reduxjs/toolkit'

const initialState = {
  token: localStorage.getItem("token") || null,
  user: localStorage.getItem("user") ? JSON.parse(localStorage.getItem("user")) : null,
  isAuthenticated: !!localStorage.getItem("token"),
  error: null
}
  

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    loginSuccess(state, action) {
      state.token = action.payload.token
      state.isAuthenticated = true
      state.error = null
      localStorage.setItem("token", action.payload.token)
    },
    userInfoSuccess(state, action) {
      state.user = action.payload
      localStorage.setItem("user", JSON.stringify(action.payload))
    },
    loginFailure(state, action) {
      state.error = action.payload
    },
    logout(state) {
      state.token = null
      state.user = null
      state.isAuthenticated = false
      localStorage.removeItem("token") // üßπ Nettoyage
      localStorage.removeItem("user")
    }
  }
})

export const { loginSuccess, loginFailure, userInfoSuccess, logout } = userSlice.actions
export default userSlice.reducer

// On d√©finie d'abord l'√©tat initial, en r√©cup√©rant le token si un est trouv√©, en r√©cup√©rant les infos utilisateur si jamais il y en a,
// JSON.parse va pars√© la chaine de caract√®re au format json pour en faire un objet javascript, √©tant unpeu le contraire de JSON.stringify 
// en v√©rifiant que l'utilisateur est connect√© et en √©tablissement une erreur potentielle d'abord initialis√© en null, on cr√©e ensuite notre
// slice avec la fonctionnalit√©s createSlice import√© depuis le redux toolkit, qui sert donc √† cr√©er un slice (partie sp√©cifique de l'√©tat
// globale redux contenant un name, un √©tat initial et des reducers qui modifient l'√©tat en fonction de l'action) les reducers sont donc ici
// loginSuccess, userInfoSucces, loginFailure et logout loginSuccess est d√©clench√© apr√®s une connexion r√©ussie, userInfoSuccess 
// lorsque les infos utilisateurs sont r√©cup√©r√©, loginFailure lorsque la connexion √©choue et logout lorsque l'utilisateur se d√©connecte
// chacun de ces reducers va donc mettre √† jour un √©tat sp√©cifique, comme le token ou le user avec action.payload qui sert √† envoyer les actions
// re√ßue au store redux, et le localstorage dans les 2 premiers reducer va permettre d'enregistrer ces infos dans celui-ci, parfois m√™me
// en format de cha√Æne json avec json.stringify, et ensuite tout √ßa est export√© avec les deux export √† la fin